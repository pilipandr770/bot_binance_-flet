# bot.py - –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Ç-–±–æ—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏ –ø–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
# 1. SIMPLE_MA: MA7 > MA25 = –¥–µ—Ä–∂–∏–º –∫–æ–∏–Ω, MA7 < MA25 = –¥–µ—Ä–∂–∏–º USDT
# 2. MA_RSI_ATR: –ú—É–ª—å—Ç–∏-—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MA, RSI –∏ ATR
import os
import json
import time
import math
import threading
from datetime import datetime, timezone
from typing import Tuple, Optional, Dict, Any, List
from flask import Flask, jsonify
from dotenv import load_dotenv
from binance.client import Client
from binance.enums import *
from binance.exceptions import BinanceAPIException, BinanceOrderException

# –ò–º–ø–æ—Ä—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
try:
    import pandas as pd
    import numpy as np
    import ta
except ImportError:
    pass

# ========== –£—Ç–∏–ª–∏—Ç—ã –ª–æ–≥–æ–≤ ==========
def log(msg: str, level: str = "INFO"):
    ts = datetime.now(timezone.utc).astimezone().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{ts}] [{level}] {msg}", flush=True)

try:
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    from indicators import IndicatorBasedStrategy
except ImportError:
    log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å indicators.py, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ MA", "WARN")

# ========== –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π ==========
from dataclasses import dataclass
from typing import List

@dataclass
class ConfigurationStatus:
    api_keys_present: bool
    api_keys_valid: bool
    environment_source: str  # "system", "file", "default"
    configuration_issues: List[str]
    safety_checks_passed: bool

@dataclass
class TradingModeStatus:
    current_mode: str  # "LIVE"
    mode_source: str   # –æ—Ç–∫—É–¥–∞ –≤–∑—è—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    blocking_issues: List[str]
    last_mode_change: Optional[datetime]

class EnvironmentConfig:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.config_status = None
        self.load_environment()
        self.validate_configuration()
    
    def load_environment(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        log("üöÄ –ù–ê–ß–ê–õ–û –ó–ê–ì–†–£–ó–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò", "CONFIG")
        log("=" * 60, "CONFIG")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ .env —Ñ–∞–π–ª—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞
        current_dir = os.path.dirname(os.path.abspath(__file__))
        env_file_path = os.path.join(current_dir, '.env')
        
        log(f"üîç –ü–æ–∏—Å–∫ .env —Ñ–∞–π–ª–∞: {env_file_path}", "CONFIG")
        if os.path.exists(env_file_path):
            log("‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º...", "CONFIG")
            load_dotenv(env_file_path)
        else:
            log("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ", "CONFIG")
            load_dotenv()  # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.api_key = self._get_env_with_logging("BINANCE_API_KEY", "").strip() or None
        self.api_secret = self._get_env_with_logging("BINANCE_API_SECRET", "").strip() or None
        self.symbol = self._get_env_with_logging("SYMBOL", "BNBUSDT", str.upper)
        self.interval = self._get_env_with_logging("INTERVAL", "30m")
        self.ma_short = self._get_env_with_logging("MA_SHORT", "7", int)
        self.ma_long = self._get_env_with_logging("MA_LONG", "25", int)
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω –≤ –ø–æ–ª—å–∑—É —Ä–∞–±–æ—Ç—ã –Ω–∞–ø—Ä—è–º—É—é —Å –±–∏—Ä–∂–µ–π
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.check_interval = self._get_env_with_logging("CHECK_INTERVAL", "60", int)
        self.state_path = self._get_env_with_logging("STATE_PATH", "state.json")
        self.ma_spread_bps = self._get_env_with_logging("MA_SPREAD_BPS", "0.5", float)
        self.max_retries = self._get_env_with_logging("MAX_RETRIES", "3", int)
        self.health_check_interval = self._get_env_with_logging("HEALTH_CHECK_INTERVAL", "300", int)
        self.min_balance_usdt = self._get_env_with_logging("MIN_BALANCE_USDT", "10.0", float)
        # Staking related
        self.enable_staking = self._get_env_with_logging("ENABLE_STAKING", "false").lower() == "true"
        self.stake_percent = self._get_env_with_logging("STAKE_PERCENT", "0.8", float)
        self.stake_mode = self._get_env_with_logging("STAKE_MODE", "flexible")
        self.min_stake_usdt = self._get_env_with_logging("MIN_STAKE_USDT", "1.0", float)
        self.stake_all = self._get_env_with_logging("STAKE_ALL", "false").lower() == "true"

        log("‚úÖ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ó–ê–ì–†–£–ñ–ï–ù–ê –£–°–ü–ï–®–ù–û", "CONFIG")
        log("=" * 60, "CONFIG")
    
    def _get_env_with_logging(self, name: str, default: str, convert_func=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        system_value = os.environ.get(name)
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ os.getenv (—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ load_dotenv)
        dotenv_value = os.getenv(name)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if system_value is not None:
            final_value = system_value
            source = "—Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
        elif dotenv_value is not None:
            final_value = dotenv_value
            source = ".env —Ñ–∞–π–ª"
        else:
            final_value = default
            source = "–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if convert_func:
            try:
                converted_value = convert_func(final_value)
                self._log_env_var(name, converted_value, convert_func(default) if default else None, source)
                return converted_value
            except (ValueError, TypeError) as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {name}={final_value}: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.", "ERROR")
                converted_default = convert_func(default) if default else None
                self._log_env_var(name, converted_default, converted_default, "–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏)")
                return converted_default
        else:
            self._log_env_var(name, final_value, default, source)
            return final_value
    
    def _log_env_var(self, name: str, value: Any, default: Any, source: str = "unknown") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º"""
        if value == default:
            log(f"üîß ENV {name}={value} (–∏—Å—Ç–æ—á–Ω–∏–∫: –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)", "CONFIG")
        else:
            log(f"üîß ENV {name}={value} (–∏—Å—Ç–æ—á–Ω–∏–∫: {source})", "CONFIG")
    
    def validate_configuration(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        api_keys_present = bool(self.api_key and self.api_secret)
        if not api_keys_present:
            issues.append("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ —Ç–æ—Ä–≥–æ–≤–ª–∏
        log("=" * 60, "CONFIG")
        log("üî¥ –†–ï–ñ–ò–ú –¢–û–†–ì–û–í–õ–ò: –†–ï–ê–õ–¨–ù–´–ô", "CONFIG")
        log("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –†–ï–ê–õ–¨–ù–´–ï —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!", "CONFIG")
        log("üí∞ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "CONFIG")
        if not api_keys_present:
            log("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!", "ERROR")
            issues.append("–î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã API –∫–ª—é—á–∏")
        log("=" * 60, "CONFIG")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config_status = ConfigurationStatus(
            api_keys_present=api_keys_present,
            api_keys_valid=False,  # –ë—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–∑–∂–µ
            environment_source="mixed",  # –°–º–µ—à–∞–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
            configuration_issues=issues,
            safety_checks_passed=len(issues) == 0
        )
    
    def get_trading_mode(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        return "LIVE"
    
    def log_configuration_status(self):
        """–ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if self.config_status:
            log("üìä –°–¢–ê–¢–£–° –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:", "CONFIG")
            log(f"   –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏: –†–ï–ê–õ–¨–ù–´–ô", "CONFIG")
            log(f"   API –∫–ª—é—á–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {'‚úÖ' if self.config_status.api_keys_present else '‚ùå'}", "CONFIG")
            log(f"   –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {'‚úÖ' if self.config_status.safety_checks_passed else '‚ùå'}", "CONFIG")
            if self.config_status.configuration_issues:
                log(f"   –ü—Ä–æ–±–ª–µ–º—ã: {', '.join(self.config_status.configuration_issues)}", "CONFIG")

class TradingModeController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, config: EnvironmentConfig):
        self.config = config
        self.trading_mode_status = None
        self._update_trading_mode_status()
    
    def _update_trading_mode_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        blocking_issues = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        if not self.config.config_status.api_keys_present:
            blocking_issues.append("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if self.config.config_status.configuration_issues:
            blocking_issues.extend(self.config.config_status.configuration_issues)
        
        self.trading_mode_status = TradingModeStatus(
            current_mode="LIVE",
            mode_source="–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è",
            blocking_issues=blocking_issues,
            last_mode_change=datetime.now(timezone.utc)
        )
    
    def is_test_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return False
    
    def is_live_mode(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        return True
    
    def validate_live_mode_requirements(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        if not self.config.config_status.api_keys_present:
            log("‚ùå –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–ê: API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã", "ERROR")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if self.config.config_status.configuration_issues:
            log(f"‚ùå –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–ê: {', '.join(self.config.config_status.configuration_issues)}", "ERROR")
            return False
        
        log("‚úÖ –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–ê: –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã", "SUCCESS")
        return True
    
    def get_mode_display_name(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ä–µ–∂–∏–º–∞"""
        return "–†–ï–ê–õ–¨–ù–´–ô"
    
    def get_mode_emoji(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞"""
        return "üî¥"
    
    def log_trading_mode_status(self):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.trading_mode_status:
            log("üìä –°–¢–ê–¢–£–° –†–ï–ñ–ò–ú–ê –¢–û–†–ì–û–í–õ–ò:", "CONFIG")
            log(f"   –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {self.get_mode_emoji()} {self.trading_mode_status.current_mode}", "CONFIG")
            log(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {self.trading_mode_status.mode_source}", "CONFIG")
            if self.trading_mode_status.blocking_issues:
                log(f"   –ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(self.trading_mode_status.blocking_issues)}", "CONFIG")
    
    def get_trade_operation_prefix(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        return "üî¥ LIVE"

class SafetyValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π"""
    
    def __init__(self, config: EnvironmentConfig):
        self.config = config
    
    def validate_api_keys(self, api_key: str, api_secret: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–µ–π"""
        if not api_key or not api_secret:
            log("‚ùå –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô: –ö–ª—é—á–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã", "SAFETY")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–ª—é—á–µ–π
        if len(api_key) < 20 or len(api_secret) < 20:
            log("‚ùå –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô: –ö–ª—é—á–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ", "SAFETY")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        import re
        if not re.match(r'^[A-Za-z0-9]+$', api_key) or not re.match(r'^[A-Za-z0-9]+$', api_secret):
            log("‚ùå –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô: –ö–ª—é—á–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã", "SAFETY")
            return False
        
        log("‚úÖ –ü–†–û–í–ï–†–ö–ê API –ö–õ–Æ–ß–ï–ô: –§–æ—Ä–º–∞—Ç –∫–ª—é—á–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π", "SAFETY")
        return True
    
    def check_account_permissions(self, client) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not client:
            log("‚ùå –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô: –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "SAFETY")
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            account_info = client.get_account()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é
            can_trade = account_info.get('canTrade', False)
            if not can_trade:
                log("‚ùå –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô: –¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞", "SAFETY")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
            account_type = account_info.get('accountType', 'UNKNOWN')
            log(f"‚úÖ –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô: –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {account_type}, —Ç–æ—Ä–≥–æ–≤–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞", "SAFETY")
            return True
            
        except Exception as e:
            log(f"‚ùå –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞: {e}", "SAFETY")
            return False
    
    def validate_minimum_balance(self, usdt_balance: float, base_balance: float, current_price: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        total_value = usdt_balance + (base_balance * current_price)
        min_required = self.config.min_balance_usdt
        
        if total_value < min_required:
            log(f"‚ùå –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å ${total_value:.2f} < ${min_required:.2f}", "SAFETY")
            return False
        
        log(f"‚úÖ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê: –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π ${total_value:.2f} >= ${min_required:.2f}", "SAFETY")
        return True
    
    def validate_trade_amount(self, amount: float, min_amount: float = 10.0) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if amount < min_amount:
            log(f"‚ùå –ü–†–û–í–ï–†–ö–ê –°–£–ú–ú–´ –¢–û–†–ì–û–í–õ–ò: –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ ${amount:.2f} < ${min_amount:.2f}", "SAFETY")
            return False
        
        log(f"‚úÖ –ü–†–û–í–ï–†–ö–ê –°–£–ú–ú–´ –¢–û–†–ì–û–í–õ–ò: –°—É–º–º–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è ${amount:.2f} >= ${min_amount:.2f}", "SAFETY")
        return True
    
    def check_api_connection(self, client) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        if not client:
            log("‚ùå –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "SAFETY")
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            client.ping()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
            server_time = client.get_server_time()
            local_time = int(time.time() * 1000)
            time_diff = abs(server_time["serverTime"] - local_time)
            
            if time_diff > 5000:  # 5 —Å–µ–∫—É–Ω–¥
                log(f"‚ö†Ô∏è –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {time_diff}–º—Å", "SAFETY")
            
            log("‚úÖ –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: API –¥–æ—Å—Ç—É–ø–Ω–æ", "SAFETY")
            return True
            
        except Exception as e:
            log(f"‚ùå –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}", "SAFETY")
            return False
    
    def perform_safety_checks(self, client=None, usdt_balance: float = 0, base_balance: float = 0, current_price: float = 0) -> List[str]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        log("üîí –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–û–ö –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò", "SAFETY")
        log("=" * 50, "SAFETY")
        
        issues = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        if not self.validate_api_keys(self.config.api_key or "", self.config.api_secret or ""):
            issues.append("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ API –∫–ª—é—á–∏")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API (–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)
        if client and not self.check_api_connection(client):
            issues.append("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω)
        if client and not self.check_account_permissions(client):
            issues.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã)
        if current_price > 0 and not self.validate_minimum_balance(usdt_balance, base_balance, current_price):
            issues.append("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if issues:
            log("‚ùå –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–í–ê–õ–ï–ù–´:", "SAFETY")
            for issue in issues:
                log(f"   - {issue}", "SAFETY")
        else:
            log("‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´", "SAFETY")
        
        log("=" * 50, "SAFETY")
        return issues
    
    def can_perform_live_trading(self, client=None, usdt_balance: float = 0, base_balance: float = 0, current_price: float = 0) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        issues = self.perform_safety_checks(client, usdt_balance, base_balance, current_price)
        return len(issues) == 0


# ========== Staking manager (Simple Earn Flexible) ==========
class StakingManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–º —Å—Ç–µ–π–∫–∏–Ω–≥–æ–º —á–µ—Ä–µ–∑ Simple Earn Flexible (Binance Simple Earn).

    –í LIVE —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥—ã client.get_simple_earn_flexible_product_list,
    client.subscribe_simple_earn_flexible_product –∏ client.redeem_simple_earn_flexible_product.
    """

    def __init__(self, client: Optional[Client], config: EnvironmentConfig):
        self.client = client
        self.config = config

    def list_flexible_products(self):
        if not self.client:
            log("STAKING: list_flexible_products –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω - –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞", "STAKING")
            return []

        try:
            return self.client.get_simple_earn_flexible_product_list()
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ Simple Earn: {e}", "ERROR")
            return []

    def find_product_for_asset(self, asset: str):
        prods = self.list_flexible_products()
        for p in prods:
            if p.get("asset") == asset and p.get("canPurchase", False):
                return p
        return None

    def stake(self, asset: str, amount: float) -> Dict[str, Any]:
        """Subscribe to flexible product. Returns result dict."""
        if not self.client:
            log(f"STAKING: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–µ–π–∫–∞—Ç—å {amount} {asset} - –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞", "STAKING")
            return {"success": False, "error": "no_client"}

        prod = self.find_product_for_asset(asset)
        if not prod:
            log(f"STAKING: –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è {asset} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å", "STAKING")
            return {"success": False, "error": "no_product"}

        params = {"productId": prod.get("productId"), "amount": str(amount)}
        try:
            res = self.client.subscribe_simple_earn_flexible_product(**params)
            log(f"STAKING: –ø–æ–¥–ø–∏—Å–∫–∞ {asset} {amount} -> {res}", "STAKING")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ API
            if isinstance(res, dict):
                return {"success": True, "result": res}
            elif isinstance(res, str):
                # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                log(f"STAKING: API –≤–µ—Ä–Ω—É–ª–æ —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞: {res}", "WARN")
                return {"success": True, "result": {"message": res}, "amount": amount}
            else:
                return {"success": True, "result": res}
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å—Ç–µ–π–∫–∏–Ω–≥: {e}", "ERROR")
            return {"success": False, "error": str(e)}

    def unstake(self, asset: str, amount: float) -> Dict[str, Any]:
        """Redeem flexible product. If amount=="ALL" or redeemAll=True, pass that param."""
        if not self.client:
            log(f"STAKING: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–∫—É–ø–∏—Ç—å {amount} {asset} - –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞", "STAKING")
            return {"success": False, "error": "no_client"}

        prod = self.find_product_for_asset(asset)
        if not prod:
            log(f"STAKING: –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è {asset} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤—ã–∫—É–ø–∞", "STAKING")
            return {"success": False, "error": "no_product"}

        params = {"productId": prod.get("productId"), "amount": str(amount), "redeemType": "FAST"}
        try:
            res = self.client.redeem_simple_earn_flexible_product(**params)
            log(f"STAKING: –≤—ã–∫—É–ø {asset} {amount} -> {res}", "STAKING")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ API
            if isinstance(res, dict):
                return {"success": True, "result": res}
            elif isinstance(res, str):
                # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞, —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                log(f"STAKING: API –≤–µ—Ä–Ω—É–ª–æ —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞: {res}", "WARN")
                return {"success": True, "result": {"message": res}, "amount": amount}
            else:
                return {"success": True, "result": res}
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –≤—ã–∫—É–ø–∞ –∏–∑ —Å—Ç–µ–π–∫–∏–Ω–≥–∞: {e}", "ERROR")
            return {"success": False, "error": str(e)}

    def get_position(self, asset: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞.
        
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç client.get_simple_earn_flexible_product_position()
        
        Returns:
            Dict —Å –ø–æ–ª—è–º–∏: asset, amount, totalAmount, totalInterest, canRedeem
        """
        if not self.client:
            return {"asset": asset, "amount": 0.0, "totalAmount": 0.0}

        try:
            res = self.client.get_simple_earn_flexible_product_position()
            log(f"STAKING: get_position response: {res}", "DEBUG")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞ API
            positions = []
            if isinstance(res, list):
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç - –ø—Ä—è–º–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏—Ü–∏–π
                positions = res
            elif isinstance(res, dict) and "rows" in res and isinstance(res["rows"], list):
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç - —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ 'total' –∏ 'rows'
                positions = res["rows"]
            elif isinstance(res, dict) and "data" in res and isinstance(res["data"], dict) and "list" in res["data"]:
                # –ï—â–µ –±–æ–ª–µ–µ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: {"data": {"list": [...]}}
                positions = res["data"]["list"]
            else:
                log(f"STAKING: API –≤–µ—Ä–Ω—É–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {type(res)}", "ERROR")
                log(f"STAKING: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {res}", "DEBUG")
                return {"asset": asset, "amount": 0, "error": "unknown_response_format"}
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∞–∫—Ç–∏–≤—É
            asset_positions = [p for p in positions if p.get("asset") == asset]
            
            if not asset_positions:
                log(f"STAKING: –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è {asset} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", "STAKING")
                return {"asset": asset, "amount": 0, "totalAmount": 0}
                
            position = asset_positions[0]
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º—ã –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ API
            try:
                amount = 0.0
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—è –≤ –ø–æ—Ä—è–¥–∫–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏—Ö –Ω–∞–ª–∏—á–∏—è
                for field in ["totalAmount", "amount", "principalAmount"]:
                    if field in position and position[field] is not None:
                        raw_amount = position[field]
                        if isinstance(raw_amount, (int, float)):
                            amount = float(raw_amount)
                            break
                        elif isinstance(raw_amount, str) and raw_amount.strip():
                            amount = float(raw_amount)
                            break
                
                # –î–æ–±–∞–≤–ª—è–µ–º amount –≤ –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if "amount" not in position:
                    position["amount"] = amount
                
                log(f"STAKING: –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è {asset}, —Å—É–º–º–∞: {amount}", "STAKING")
                return position
                
            except (ValueError, TypeError) as e:
                log(f"STAKING: –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É–º–º—ã –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {e}, position={position}", "ERROR")
                return {"asset": asset, "amount": 0, "error": str(e), "rawPosition": position}
                
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞: {e}", "ERROR")
            return {"asset": asset, "amount": 0, "error": str(e)}

# ========== –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤ ==========
class AssetSwitcher:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏ –ø–æ MA —Å–∏–≥–Ω–∞–ª–∞–º"""
    
    def __init__(self, client: Optional[Client], symbol: str, trading_mode_controller: Optional['TradingModeController'] = None):
        self.client = client
        self.symbol = symbol
        self.base_asset = symbol[:-4] if symbol.endswith("USDT") else symbol.split("USDT")[0]
        self.quote_asset = "USDT"
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º.
        # –†–∞–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å 0, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–ª–æ –∫ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º
        # (time_since_last = current_time - 0 =~ seconds since epoch) –≤ –ª–æ–≥–∞—Ö.
        self.last_switch_time = time.time()
        self.min_switch_interval = 10  # –º–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è–º–∏
        self.trading_mode_controller = trading_mode_controller
    
    def should_hold_base(self, ma_short: float, ma_long: float) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–æ–ª–∂–Ω—ã –ª–∏ –º—ã –¥–µ—Ä–∂–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ (–∫–æ–∏–Ω)"""
        return ma_short > ma_long
    
    def get_current_asset_preference(self, usdt_balance: float, base_balance: float, current_price: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –º—ã —Å–µ–π—á–∞—Å –¥–µ—Ä–∂–∏–º"""
        usdt_value = usdt_balance
        base_value = base_balance * current_price
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        log(f"üîç –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ê–ö–¢–ò–í–ê: USDT=${usdt_value:.2f}, {self.base_asset}=${base_value:.2f}", "DEBUG")
        
        # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –¥–µ—Ä–∂–∏–º —Ç–æ—Ç –∞–∫—Ç–∏–≤, –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ–ª—å—à–µ –ø–æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if base_value > usdt_value and base_value > 1.0:  # –º–∏–Ω–∏–º—É–º $1
            log(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢: –î–µ—Ä–∂–∏–º {self.base_asset} (${base_value:.2f} > ${usdt_value:.2f})", "DEBUG")
            return self.base_asset
        else:
            log(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢: –î–µ—Ä–∂–∏–º {self.quote_asset} (${usdt_value:.2f} >= ${base_value:.2f})", "DEBUG")
            return self.quote_asset
    
    def need_to_switch(self, current_asset: str, should_hold: str) -> bool:
        """–ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∞–∫—Ç–∏–≤"""
        current_time = time.time()
        time_since_last = current_time - self.last_switch_time
        
        log(f"üîç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø: current='{current_asset}', should='{should_hold}', time_since_last={time_since_last:.1f}s", "DEBUG")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
        if time_since_last < self.min_switch_interval:
            log(f"üîç –ö–£–õ–î–ê–£–ù –ê–ö–¢–ò–í–ï–ù: {time_since_last:.1f}s < {self.min_switch_interval}s", "DEBUG")
            return False
        
        assets_different = current_asset != should_hold
        log(f"üîç –ê–ö–¢–ò–í–´ –†–ê–ó–ù–´–ï: {assets_different}", "DEBUG")
        
        return assets_different
    
    def execute_switch(self, from_asset: str, to_asset: str, balance: float, current_price: float, step: float) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞"""
        try:
            if from_asset == self.base_asset and to_asset == self.quote_asset:
                # –ü—Ä–æ–¥–∞–µ–º –∫–æ–∏–Ω –∑–∞ USDT
                return self._sell_base_for_usdt(balance, step)
            elif from_asset == self.quote_asset and to_asset == self.base_asset:
                # –ü–æ–∫—É–ø–∞–µ–º –∫–æ–∏–Ω –∑–∞ USDT
                return self._buy_base_with_usdt(balance, current_price, step)
            return False
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è {from_asset} -> {to_asset}: {e}", "ERROR")
            return False
    
    def _sell_base_for_usdt(self, base_qty: float, step: float) -> bool:
        """–ü—Ä–æ–¥–∞—Ç—å –≤–µ—Å—å –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ –∑–∞ USDT"""
        
        if not self.client:
            log(f"‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API", "ERROR")
            return False
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏
        qty = round_step(base_qty * 0.999, step)  # 99.9% –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
        
        log(f"üî¢ –†–ê–°–ß–ï–¢ –ü–†–û–î–ê–ñ–ò: –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={base_qty:.6f}, –ü–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è={qty} (step={step})", "CALC")
        
        if qty <= 0:
            log(f"‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ: {qty}", "WARN")
            return False
        
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å—Ç—Ä–æ–∫—É —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
            precision = 0
            step_str = str(step)
            if '.' in step_str:
                precision = len(step_str.split('.')[-1])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Binance
            qty_str = '{:.{}f}'.format(qty, precision)
            log(f"üì§ –û–¢–ü–†–ê–í–ö–ê –û–†–î–ï–†–ê –ù–ê –ü–†–û–î–ê–ñ–£: {qty_str} {self.base_asset} (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é {precision})", "ORDER")
            
            order = self.client.order_market_sell(symbol=self.symbol, quantity=qty_str)
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ
            if 'fills' in order and order['fills']:
                total_usdt = sum(float(fill['price']) * float(fill['qty']) for fill in order['fills'])
                avg_price = total_usdt / float(order['executedQty']) if float(order['executedQty']) > 0 else 0
                log(f"‚úÖ –ü–†–û–î–ê–ñ–ê –í–´–ü–û–õ–ù–ï–ù–ê: {order['executedQty']} {self.base_asset} –∑–∞ {total_usdt:.2f} USDT (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.4f})", "TRADE")
            else:
                log(f"‚úÖ –ü–†–û–î–ê–ñ–ê –í–´–ü–û–õ–ù–ï–ù–ê: {qty_str} {self.base_asset} -> USDT", "TRADE")
            
            self.last_switch_time = time.time()
            return True
        except BinanceAPIException as e:
            log(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–û–î–ê–ñ–ò: {e}", "ERROR")
            # –ü—Ä–æ–±—É–µ–º —Å –º–µ–Ω—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ –±–æ–ª—å—à–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            if "—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é —Ç–æ—á–Ω–æ—Å—Ç—å" in str(e) and precision > 0:
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å –º–µ–Ω—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                    new_precision = max(0, precision - 1)
                    qty_str = '{:.{}f}'.format(qty, new_precision)
                    log(f"üîÑ –ü–û–í–¢–û–†–ù–ê–Ø –ü–û–ü–´–¢–ö–ê —Å –º–µ–Ω—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é {new_precision}: {qty_str}", "RETRY")
                    
                    order = self.client.order_market_sell(symbol=self.symbol, quantity=qty_str)
                    log(f"‚úÖ –ü–†–û–î–ê–ñ–ê –í–´–ü–û–õ–ù–ï–ù–ê —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏: {qty_str} {self.base_asset} -> USDT", "TRADE")
                    self.last_switch_time = time.time()
                    return True
                except Exception as retry_e:
                    log(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {retry_e}", "ERROR")
            return False
        except Exception as e:
            log(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–û–î–ê–ñ–ò: {e}", "ERROR")
            return False
    
    def _buy_base_with_usdt(self, usdt_amount: float, current_price: float, step: float) -> bool:
        """–ö—É–ø–∏—Ç—å –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ –∑–∞ –≤–µ—Å—å USDT"""
        
        if not self.client:
            log(f"‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API", "ERROR")
            return False
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–π
        usdt_to_spend = usdt_amount * 0.999  # 99.9% –¥–ª—è —É—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π
        qty = round_step(usdt_to_spend / current_price, step)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
        precision = 0
        step_str = str(step)
        if '.' in step_str:
            precision = len(step_str.split('.')[-1])
            
        log(f"üî¢ –†–ê–°–ß–ï–¢ –ü–û–ö–£–ü–ö–ò: USDT={usdt_amount:.2f}, –ö —Ç—Ä–∞—Ç–µ={usdt_to_spend:.2f}, –¶–µ–Ω–∞={current_price:.4f}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ={qty} (step={step}, precision={precision})", "CALC")
        
        if qty <= 0 or usdt_to_spend < 10:  # –º–∏–Ω–∏–º—É–º $10
            log(f"‚ùå –°—É–º–º–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞: {usdt_to_spend:.2f} USDT (–º–∏–Ω–∏–º—É–º $10)", "WARN")
            return False
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Binance
            qty_str = '{:.{}f}'.format(qty, precision)
            
            log(f"üì§ –û–¢–ü–†–ê–í–ö–ê –û–†–î–ï–†–ê –ù–ê –ü–û–ö–£–ü–ö–£: {qty_str} {self.base_asset} –∑–∞ {usdt_to_spend:.2f} USDT", "ORDER")
            order = self.client.order_market_buy(symbol=self.symbol, quantity=qty_str)
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ä–¥–µ—Ä–µ
            if 'fills' in order and order['fills']:
                total_cost = sum(float(fill['price']) * float(fill['qty']) for fill in order['fills'])
                avg_price = total_cost / float(order['executedQty']) if float(order['executedQty']) > 0 else 0
                log(f"‚úÖ –ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê: {order['executedQty']} {self.base_asset} –∑–∞ {total_cost:.2f} USDT (—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:.4f})", "TRADE")
            else:
                log(f"‚úÖ –ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê: {usdt_to_spend:.2f} USDT -> {qty_str} {self.base_asset}", "TRADE")
            
            self.last_switch_time = time.time()
            return True
        except BinanceAPIException as e:
            log(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–ö–£–ü–ö–ò: {e}", "ERROR")
            # –ü—Ä–æ–±—É–µ–º —Å –º–µ–Ω—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ –±–æ–ª—å—à–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
            if "—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é —Ç–æ—á–Ω–æ—Å—Ç—å" in str(e) and precision > 0:
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å –º–µ–Ω—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                    new_precision = max(0, precision - 1)
                    qty_str = '{:.{}f}'.format(qty, new_precision)
                    log(f"üîÑ –ü–û–í–¢–û–†–ù–ê–Ø –ü–û–ü–´–¢–ö–ê —Å –º–µ–Ω—å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é {new_precision}: {qty_str}", "RETRY")
                    
                    order = self.client.order_market_buy(symbol=self.symbol, quantity=qty_str)
                    log(f"‚úÖ –ü–û–ö–£–ü–ö–ê –í–´–ü–û–õ–ù–ï–ù–ê —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏: {qty_str} {self.base_asset}", "TRADE")
                    self.last_switch_time = time.time()
                    return True
                except Exception as retry_e:
                    log(f"‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ: {retry_e}", "ERROR")
            return False
        except Exception as e:
            log(f"‚ùå –û–®–ò–ë–ö–ê –ü–û–ö–£–ü–ö–ò: {e}", "ERROR")
            return False

# ========== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ==========
env_config = EnvironmentConfig()

# –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
env_config.log_configuration_status()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
API_KEY = env_config.api_key
API_SECRET = env_config.api_secret
SYMBOL = env_config.symbol
INTERVAL = env_config.interval
MA_SHORT = env_config.ma_short
MA_LONG = env_config.ma_long
CHECK_INTERVAL = env_config.check_interval
STATE_PATH = env_config.state_path
MA_SPREAD_BPS = env_config.ma_spread_bps
MAX_RETRIES = env_config.max_retries
HEALTH_CHECK_INTERVAL = env_config.health_check_interval
MIN_BALANCE_USDT = env_config.min_balance_usdt

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
client: Optional[Client] = None
asset_switcher: Optional[AssetSwitcher] = None
indicator_strategy: Optional['IndicatorBasedStrategy'] = None
trading_mode_controller: Optional[TradingModeController] = None
safety_validator: Optional[SafetyValidator] = None
staking_manager: Optional[StakingManager] = None
running = False
last_action_ts = 0
last_health_check = 0
error_count = 0

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
STRATEGY_TYPE = "MA_RSI_ATR"  # –∏–ª–∏ "SIMPLE_MA" –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
USE_MULTI_TIMEFRAME = True  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤

bot_status = {
    "status": "idle", 
    "symbol": SYMBOL, 
    "current_asset": "USDT",  # –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –¥–µ—Ä–∂–∏–º —Å–µ–π—á–∞—Å
    "should_hold": "USDT",    # –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –¥–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    "last_update": None,
    "balance_usdt": 0.0,
    "balance_base": 0.0,
    "current_price": 0.0,
    "ma_short": 0.0,
    "ma_long": 0.0,
    "strategy_type": STRATEGY_TYPE,
    "market_state": "unknown",  # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞ –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º (flet, buy, sell, no_trade)
    "indicators": {},  # –ë—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    "error_count": 0,
    "uptime": 0,
    "last_switch": None,
    "switches_count": 0
}

# ========== –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ==========
def load_state():
    global bot_status
    if os.path.exists(STATE_PATH):
        try:
            with open(STATE_PATH, "r", encoding="utf-8") as f:
                data = json.load(f)
                bot_status.update(data)
                log("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ state.json", "STATE")
        except Exception as e:
            log(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}", "WARN")

def save_state():
    try:
        bot_status["last_update"] = datetime.now(timezone.utc).isoformat()
        with open(STATE_PATH, "w", encoding="utf-8") as f:
            json.dump(bot_status, f, ensure_ascii=False, indent=2)
    except Exception as e:
        log(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {e}", "WARN")

# ========== Binance –∫–ª–∏–µ–Ω—Ç ==========
def init_client():
    global client, asset_switcher, trading_mode_controller, staking_manager
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
    trading_mode_controller = TradingModeController(env_config)
    trading_mode_controller.log_trading_mode_status()
    
    if API_KEY and API_SECRET:
        try:
            client = Client(API_KEY, API_SECRET)
            # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
            server_time = client.get_server_time()
            local_time = int(time.time() * 1000)
            offset = server_time["serverTime"] - local_time
            if abs(offset) > 1000:
                client.timestamp_offset = offset
                log(f"–í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ, offset={offset}–º—Å", "TIME")
            
            client.ping()
            asset_switcher = AssetSwitcher(client, SYMBOL, trading_mode_controller)
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–µ–π–∫–∏–Ω–≥–∞
            global staking_manager
            staking_manager = StakingManager(client, env_config)
            
            log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance —É—Å–ø–µ—à–Ω–æ", "SUCCESS")
            bot_status["status"] = "connected"
            return True
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}", "ERROR")
            client = None
            asset_switcher = None
            bot_status["status"] = "connection_error"
            return False
    else:
        log("API –∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã ‚Äî –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞", "ERROR")
        asset_switcher = AssetSwitcher(None, SYMBOL, trading_mode_controller)
        staking_manager = StakingManager(None, env_config)
        bot_status["status"] = "no_api_keys"
        return False

# ========== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–∏–º–≤–æ–ª—É –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ ==========
def get_symbol_filters(symbol: str):
    if not client:
        return 0.001, 0.01, 0.001, 10.0
    
    try:
        info = client.get_symbol_info(symbol)
        if not info:
            raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω —Å–∏–º–≤–æ–ª {symbol}")
        
        lot = next(f for f in info["filters"] if f["filterType"] == "LOT_SIZE")
        pricef = next(f for f in info["filters"] if f["filterType"] == "PRICE_FILTER")
        min_notional = next((f for f in info["filters"] if f["filterType"] == "MIN_NOTIONAL"), None)
        
        step = float(lot["stepSize"])
        tick = float(pricef["tickSize"])
        min_qty = float(lot["minQty"])
        min_not = float(min_notional["minNotional"]) if min_notional else 10.0
        
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        log(f"–§–ò–õ–¨–¢–†–´ –°–ò–ú–í–û–õ–ê {symbol}:", "INFO")
        log(f"  - Step Size (LOT_SIZE): {step}", "INFO")
        log(f"  - Tick Size (PRICE_FILTER): {tick}", "INFO")
        log(f"  - Min Quantity: {min_qty}", "INFO")
        log(f"  - Min Notional: {min_not}", "INFO")
        
        return step, tick, min_qty, min_not
    except Exception as e:
        log(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∏–º–≤–æ–ª–∞: {e}", "ERROR")
        return 0.001, 0.01, 0.001, 10.0

def round_step(qty: float, step: float) -> float:
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–≥–∞
    precision = 0
    step_str = str(step)
    if '.' in step_str:
        precision = len(step_str.split('.')[-1])
    
    rounded = math.floor(qty / step) * step
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
    return float('{:.{}f}'.format(rounded, precision))

def round_tick(price: float, tick: float) -> float:
    return round(math.floor(price / tick) * tick, 8)

def retry_on_error(func, max_retries=None, delay=1):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.

    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É `MAX_RETRIES` –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ
    –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NameError –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
    –º–æ–¥—É–ª—è (–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏).
    """
    if max_retries is None:
        # –ë–µ—Ä—ë–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º 3
        max_retries = globals().get("MAX_RETRIES", 3)

    for attempt in range(max_retries):
        try:
            return func()
        except (BinanceAPIException, BinanceOrderException) as e:
            if "Too many requests" in str(e) or "Request rate limit" in str(e):
                wait_time = delay * (2 ** attempt)
                log(f"Rate limit, –∂–¥–µ–º {wait_time}—Å (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries})", "WARN")
                time.sleep(wait_time)
            else:
                log(f"Binance –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}", "ERROR")
                if attempt < max_retries - 1:
                    time.sleep(delay)
        except Exception as e:
            log(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}): {e}", "ERROR")
            if attempt < max_retries - 1:
                time.sleep(delay)
    
    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫")

# ========== –î–∞–Ω–Ω—ã–µ –∏ MA ==========
BINANCE_INTERVALS = {
    "1m": Client.KLINE_INTERVAL_1MINUTE,
    "3m": Client.KLINE_INTERVAL_3MINUTE,
    "5m": Client.KLINE_INTERVAL_5MINUTE,
    "15m": Client.KLINE_INTERVAL_15MINUTE,
    "30m": Client.KLINE_INTERVAL_30MINUTE,
    "1h": Client.KLINE_INTERVAL_1HOUR,
    "4h": Client.KLINE_INTERVAL_4HOUR,
}

def get_closes(symbol: str, interval: str, limit: int = 200):
    def _get_klines():
        inter = BINANCE_INTERVALS.get(interval, Client.KLINE_INTERVAL_5MINUTE)
        klines = client.get_klines(symbol=symbol, interval=inter, limit=limit)
        return [float(k[4]) for k in klines]
    
    return retry_on_error(_get_klines)

def get_klines_data(symbol: str, interval: str, limit: int = 200):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–µ—á–∞—Ö (OHLCV)
    """
    
    def _get_full_klines():
        inter = BINANCE_INTERVALS.get(interval, Client.KLINE_INTERVAL_5MINUTE)
        klines = client.get_klines(symbol=symbol, interval=inter, limit=limit)
        
        data = {
            'open': [float(k[1]) for k in klines],
            'high': [float(k[2]) for k in klines],
            'low': [float(k[3]) for k in klines],
            'close': [float(k[4]) for k in klines],
            'volume': [float(k[5]) for k in klines]
        }
        
        return data
    
    return retry_on_error(_get_full_klines)

def ma(arr, period):
    if len(arr) < period:
        return None
    return sum(arr[-period:]) / period

# ========== –ë–∞–ª–∞–Ω—Å—ã ==========
def get_balances() -> Tuple[float, float]:
    def _get_balances():
        base = SYMBOL[:-4] if SYMBOL.endswith("USDT") else SYMBOL.split("USDT")[0]
        usdt = float(client.get_asset_balance("USDT")["free"])
        base_bal = float(client.get_asset_balance(base)["free"])
        return usdt, base_bal
    
    return retry_on_error(_get_balances)

# ========== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã ==========
def health_check():
    global last_health_check, error_count
    current_time = time.time()
    
    if current_time - last_health_check > HEALTH_CHECK_INTERVAL:
        try:
            if client:
                client.ping()
                usdt_bal, base_bal = get_balances()
                bot_status.update({
                    "balance_usdt": usdt_bal,
                    "balance_base": base_bal,
                    "error_count": error_count
                })
                
                if error_count > 0:
                    error_count = max(0, error_count - 1)
                    
            last_health_check = current_time
            log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω–∞", "HEALTH")
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}", "ERROR")
            error_count += 1

# ========== –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª ==========
def trading_loop():
    global running, last_action_ts, bot_status, error_count, indicator_strategy
    
    start_time = time.time()
    log(f"–°—Ç–∞—Ä—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è {SYMBOL}", "START")
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ running = True
    if not running:
        log("‚ö†Ô∏è running=False, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ True", "WARN")
        running = True
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å–∏–º–≤–æ–ª–∞
    step, tick, min_qty, min_notional = get_symbol_filters(SYMBOL)
    load_state()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º asset_switcher –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    global asset_switcher
    if asset_switcher is None:
        log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AssetSwitcher...", "INIT")
        asset_switcher = AssetSwitcher(client, SYMBOL)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    if STRATEGY_TYPE == "MA_RSI_ATR" and indicator_strategy is None:
        try:
            log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndicatorBasedStrategy...", "INIT")
            indicator_strategy = IndicatorBasedStrategy(SYMBOL)
        except Exception as e:
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IndicatorBasedStrategy: {e}. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è MA.", "ERROR")
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ MA
            bot_status["strategy_type"] = "SIMPLE_MA"
    
    cycle_count = 0
    log(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–ª–∏ (running={running})", "LOOP")
    
    while running:
        try:
            cycle_count += 1
            log(f"üîÑ –¶–ò–ö–õ #{cycle_count} ==========================================", "CYCLE")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            bot_status["uptime"] = int(time.time() - start_time)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
            health_check()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            log("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...", "DATA")
            prices = get_closes(SYMBOL, INTERVAL, limit=max(MA_LONG * 3, 100))
            price = prices[-1]
            usdt_bal, base_bal = get_balances()
            
            # –î–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ MA_RSI_ATR –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–∑–Ω—ã–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
            data_multi_tf = {}
            if bot_status["strategy_type"] == "MA_RSI_ATR" and USE_MULTI_TIMEFRAME:
                log("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º—É–ª—å—Ç–∏-—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...", "DATA")
                try:
                    data_multi_tf = {
                        "30m": get_klines_data(SYMBOL, "30m", 100),
                        "1h": get_klines_data(SYMBOL, "1h", 100),
                        "4h": get_klines_data(SYMBOL, "4h", 100)
                    }
                    log(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º: 30m ({len(data_multi_tf['30m']['close'])}), 1h ({len(data_multi_tf['1h']['close'])}), 4h ({len(data_multi_tf['4h']['close'])})", "DATA")
                except Exception as e:
                    log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º—É–ª—å—Ç–∏-—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}", "ERROR")
            
            # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –±–∞–ª–∞–Ω—Å–æ–≤
            base_value = base_bal * price
            total_value = usdt_bal + base_value
            log(f"üí∞ –ë–ê–õ–ê–ù–°–´: USDT={usdt_bal:.2f} | {asset_switcher.base_asset}={base_bal:.6f} (${base_value:.2f}) | –í–°–ï–ì–û=${total_value:.2f}", "BALANCE")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            bot_status.update({
                "current_price": price,
                "balance_usdt": usdt_bal,
                "balance_base": base_bal
            })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            if total_value < MIN_BALANCE_USDT:
                log(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: ${total_value:.2f} < ${MIN_BALANCE_USDT}", "WARN")
                time.sleep(CHECK_INTERVAL)
                continue
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –¥–µ—Ä–∂–∏–º —Å–µ–π—á–∞—Å (–æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π)
            if asset_switcher is None:
                log("‚ùå AssetSwitcher –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "ERROR")
                time.sleep(CHECK_INTERVAL)
                continue
            
            current_asset = asset_switcher.get_current_asset_preference(usdt_bal, base_bal, price)
            bot_status["current_asset"] = current_asset
            
            # –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            should_hold_base = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–µ—Ä–∂–∏–º USDT
            should_hold_asset = asset_switcher.quote_asset
            market_state = "no_trade"
            
            if bot_status["strategy_type"] == "MA_RSI_ATR" and indicator_strategy is not None and USE_MULTI_TIMEFRAME:
                # ==== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø MA_RSI_ATR ====
                log("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ MA_RSI_ATR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...", "STRATEGY")
                
                try:
                    if all(len(data_multi_tf.get(tf, {}).get('close', [])) > 25 for tf in ['30m', '1h', '4h']):
                        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—Ç –Ω–∞—à–µ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                        analysis = indicator_strategy.analyze(data_multi_tf['30m'], data_multi_tf['1h'], data_multi_tf['4h'])
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ —Å—Ç–∞—Ç—É—Å
                        should_hold_base = analysis["should_hold_base"]
                        should_hold_asset = asset_switcher.base_asset if should_hold_base else asset_switcher.quote_asset
                        market_state = analysis["market_state"]
                        
                        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                        log(f"üìà –ò–ù–î–ò–ö–ê–¢–û–†–´: 30m —Å–∏–≥–Ω–∞–ª={analysis['30m']['signal']}, 1h RSI={analysis['1h']['rsi']:.1f}, ATR={analysis['1h']['atr_percent']:.2f}%, 4h —Ç—Ä–µ–Ω–¥={analysis['4h']['trend']}", "INDICATORS")
                        log(f"üéØ –†–ï–®–ï–ù–ò–ï: {market_state} ‚Üí –î–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å {should_hold_asset}", "STRATEGY")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞
                        bot_status.update({
                            "market_state": market_state,
                            "should_hold": should_hold_asset,
                            "indicators": {
                                "30m": {
                                    "signal": analysis['30m']['signal'],
                                    "ma7": analysis['30m']['ma7'],
                                    "ma25": analysis['30m']['ma25'],
                                },
                                "1h": {
                                    "rsi": analysis['1h']['rsi'],
                                    "atr": analysis['1h']['atr'],
                                    "atr_percent": analysis['1h']['atr_percent'],
                                },
                                "4h": {
                                    "trend": analysis['4h']['trend'],
                                    "ma7": analysis['4h']['ma7'],
                                    "ma25": analysis['4h']['ma25'],
                                },
                            }
                        })
                        
                        # –ï—Å–ª–∏ —Ä—ã–Ω–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–ª–µ—Ç–∞, –Ω–µ —Ç–æ—Ä–≥—É–µ–º
                        if market_state == "flet":
                            log(f"üîá –§–õ–ï–¢: –†—ã–Ω–æ–∫ –≤ –±–æ–∫–æ–≤–∏–∫–µ, —Ç–æ—Ä–≥–æ–≤–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "FILTER")
                            time.sleep(CHECK_INTERVAL)
                            continue
                        
                        # –ï—Å–ª–∏ –Ω–µ—Ç —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                        if market_state == "no_trade":
                            log(f"üîá –ù–ï–¢ –°–ò–ì–ù–ê–õ–ê: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ—Ä–∂–∞—Ç—å {current_asset}", "FILTER")
                            time.sleep(CHECK_INTERVAL)
                            continue
                    else:
                        log("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º—É–ª—å—Ç–∏-—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é MA —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", "WARN")
                        # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é MA —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                        bot_status["strategy_type"] = "SIMPLE_MA"
                except Exception as e:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –≤ MA_RSI_ATR —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", "ERROR")
                    bot_status["strategy_type"] = "SIMPLE_MA"
            
            # –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, —Ç–æ –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º SIMPLE_MA, –ª–∏–±–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –≤ MA_RSI_ATR
            if bot_status["strategy_type"] != "MA_RSI_ATR" or market_state == "no_trade":
                # ==== –ö–õ–ê–°–°–ò–ß–ï–°–ö–ê–Ø MA –°–¢–†–ê–¢–ï–ì–ò–Ø ====
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º MA
                m1 = ma(prices, MA_SHORT)
                m2 = ma(prices, MA_LONG)
                
                if m1 is not None and m2 is not None:
                    # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ MA
                    ma_diff = m1 - m2
                    ma_diff_pct = (ma_diff / price) * 100
                    spread_bps = abs(ma_diff / price) * 10000.0
                    
                    log(f"üìà MA –ê–ù–ê–õ–ò–ó: MA7={m1:.4f} | MA25={m2:.4f} | –†–∞–∑–Ω–∏—Ü–∞={ma_diff:+.4f} ({ma_diff_pct:+.3f}%) | –°–ø—Ä–µ–¥={spread_bps:.1f}–±.–ø.", "MA")
                    
                    bot_status.update({
                        "ma_short": m1,
                        "ma_long": m2
                    })
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –∞–∫—Ç–∏–≤ –¥–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å
                    should_hold_base = asset_switcher.should_hold_base(m1, m2)
                    should_hold_asset = asset_switcher.base_asset if should_hold_base else asset_switcher.quote_asset
                    
                    # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                    trend_direction = "–í–û–°–•–û–î–Ø–©–ò–ô üìà" if m1 > m2 else "–ù–ò–°–•–û–î–Ø–©–ò–ô üìâ"
                    strategy_reason = f"MA7 {'>' if m1 > m2 else '<'} MA25"
                    log(f"üéØ –°–¢–†–ê–¢–ï–ì–ò–Ø: {trend_direction} ({strategy_reason}) ‚Üí –î–æ–ª–∂–Ω—ã –¥–µ—Ä–∂–∞—Ç—å {should_hold_asset}", "STRATEGY")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    bot_status.update({
                        "should_hold": should_hold_asset,
                        "market_state": "buy" if should_hold_base else "sell"
                    })
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä —à—É–º–∞
                    if spread_bps < MA_SPREAD_BPS:
                        log(f"üîá –§–ò–õ–¨–¢–† –®–£–ú–ê: –°–ø—Ä–µ–¥ {spread_bps:.1f}–±.–ø. < {MA_SPREAD_BPS}–±.–ø. - —Å–∏–≥–Ω–∞–ª —Å–ª–∏—à–∫–æ–º —Å–ª–∞–±—ã–π", "FILTER")
                        time.sleep(CHECK_INTERVAL)
                        continue
                else:
                    log("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ MA", "ERROR")
                    time.sleep(CHECK_INTERVAL)
                    continue
            
            log(f"üè¶ –¢–ï–ö–£–©–ò–ô –ê–ö–¢–ò–í: {current_asset} (–ø–æ –±–∞–ª–∞–Ω—Å–∞–º: USDT=${usdt_bal:.2f}, {asset_switcher.base_asset}=${base_value:.2f})", "CURRENT")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
            time_since_last_switch = time.time() - asset_switcher.last_switch_time
            if time_since_last_switch < asset_switcher.min_switch_interval:
                remaining_cooldown = asset_switcher.min_switch_interval - time_since_last_switch
                log(f"‚è∞ –ö–£–õ–î–ê–£–ù: –û—Å—Ç–∞–ª–æ—Å—å {remaining_cooldown:.1f}—Å–µ–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è", "COOLDOWN")
                time.sleep(CHECK_INTERVAL)
                continue
            
            # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            status_emoji = "‚úÖ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–û" if current_asset == should_hold_asset else "‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï"
            log(f"üìä –°–¢–ê–¢–£–°: –¶–µ–Ω–∞={price:.4f} | –î–µ—Ä–∂–∏–º={current_asset} | –ù—É–∂–Ω–æ={should_hold_asset} | {status_emoji}", "STATUS")
            
            # –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            log(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: current_asset='{current_asset}', should_hold_asset='{should_hold_asset}'", "DEBUG")
            log(f"üîç –ë–ê–õ–ê–ù–°–´: USDT={usdt_bal:.2f}, {asset_switcher.base_asset}={base_bal:.6f} (${base_value:.2f})", "DEBUG")
            log(f"üîç –ö–£–õ–î–ê–£–ù: –ü—Ä–æ—à–ª–æ {time_since_last_switch:.1f}—Å–µ–∫ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è (–º–∏–Ω: {asset_switcher.min_switch_interval}—Å–µ–∫)", "DEBUG")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∞–∫—Ç–∏–≤
            need_switch = asset_switcher.need_to_switch(current_asset, should_hold_asset)
            log(f"üîç –†–ï–®–ï–ù–ò–ï: need_to_switch = {need_switch}", "DEBUG")
            
            if need_switch:
                log(f"üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –¢–†–ï–ë–£–ï–¢–°–Ø: {current_asset} ‚Üí {should_hold_asset}", "SWITCH")
                
                # –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
                if current_asset == asset_switcher.base_asset:
                    # –ü—Ä–æ–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤
                    log(f"üìâ –ü–†–û–î–ê–ñ–ê: {base_bal:.6f} {asset_switcher.base_asset} ‚Üí USDT –ø–æ —Ü–µ–Ω–µ {price:.4f}", "TRADE_PLAN")
                    expected_usdt = base_bal * price * 0.999  # —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
                    log(f"üíµ –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ~{expected_usdt:.2f} USDT (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ 0.1%)", "TRADE_PLAN")
                    
                    success = asset_switcher.execute_switch(
                        current_asset, should_hold_asset, base_bal, price, step
                    )
                else:
                    # –ü–æ–∫—É–ø–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤
                    log(f"üìà –ü–û–ö–£–ü–ö–ê: {usdt_bal:.2f} USDT ‚Üí {asset_switcher.base_asset} –ø–æ —Ü–µ–Ω–µ {price:.4f}", "TRADE_PLAN")
                    expected_qty = (usdt_bal * 0.999) / price  # —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
                    log(f"ü™ô –û–ñ–ò–î–ê–ï–ú–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ~{expected_qty:.6f} {asset_switcher.base_asset} (—Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ 0.1%)", "TRADE_PLAN")
                    
                    success = asset_switcher.execute_switch(
                        current_asset, should_hold_asset, usdt_bal, price, step
                    )
                
                if success:
                    bot_status["switches_count"] = bot_status.get("switches_count", 0) + 1
                    bot_status["last_switch"] = datetime.now(timezone.utc).isoformat()
                    last_action_ts = time.time()
                    log(f"‚úÖ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –í–´–ü–û–õ–ù–ï–ù–û –£–°–ü–ï–®–ù–û! –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π: {bot_status['switches_count']}", "SUCCESS")
                    
                    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –Ω–∞ –±–∏—Ä–∂–µ
                    time.sleep(2)
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
                    new_usdt_bal, new_base_bal = get_balances()
                    new_base_value = new_base_bal * price
                    new_total = new_usdt_bal + new_base_value
                    log(f"üí∞ –ù–û–í–´–ï –ë–ê–õ–ê–ù–°–´: USDT={new_usdt_bal:.2f} | {asset_switcher.base_asset}={new_base_bal:.6f} (${new_base_value:.2f}) | –í–°–ï–ì–û=${new_total:.2f}", "RESULT")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –Ω–æ–≤—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏
                    bot_status.update({
                        "balance_usdt": new_usdt_bal,
                        "balance_base": new_base_bal
                    })
                else:
                    log(f"‚ùå –û–®–ò–ë–ö–ê –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø! –ë—É–¥–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ.", "ERROR")
                    error_count += 1
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ bot_status –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    bot_status["last_error"] = {
                            "timestamp": datetime.now(timezone.utc).isoformat(),
                            "action": f"switch_{current_asset}_to_{should_hold_asset}",
                            "error_count": error_count
                        }
                # ========== Staking: –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ==========
                try:
                    if env_config.enable_staking and staking_manager:
                        log(f"STAKING: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å—Ç–µ–π–∫–∏–Ω–≥–∞ (enable_staking={env_config.enable_staking}, stake_all={env_config.stake_all})", "STAKING")
                        # –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–µ—Ä–∂–∞—Ç—å –±–∞–∑–æ–≤—ã–π –∞–∫—Ç–∏–≤ ‚Äî —Å—Ç–µ–π–∫–∞–µ–º —á–∞—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ
                        if should_hold_asset == asset_switcher.base_asset:
                            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Å—Ç–µ–π–∫–∏–Ω–≥–µ
                            current_staking_position = staking_manager.get_position(asset_switcher.base_asset)
                            current_staked_amount = 0.0
                            
                            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞—Å—Ç–µ–π–∫–∞–Ω–Ω—É—é —Å—É–º–º—É
                            try:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–æ–ª–µ–π
                                for field in ["totalAmount", "amount", "principalAmount"]:
                                    if field in current_staking_position and current_staking_position[field] is not None:
                                        raw_amount = current_staking_position[field]
                                        if isinstance(raw_amount, (int, float)):
                                            current_staked_amount = float(raw_amount)
                                            break
                                        elif isinstance(raw_amount, str) and raw_amount.strip():
                                            current_staked_amount = float(raw_amount)
                                            break
                            except (ValueError, TypeError) as e:
                                log(f"STAKING: –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–µ–π–∫–∏–Ω–≥–∞: {e}", "ERROR")
                            
                            log(f"STAKING: —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è {asset_switcher.base_asset} –≤ —Å—Ç–µ–π–∫–∏–Ω–≥–µ: {current_staked_amount}", "STAKING")
                            
                            # –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ STAKE_ALL ‚Äî —Å—Ç–µ–π–∫–∞–µ–º –≤–µ—Å—å –±–∞–∑–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
                            if env_config.stake_all:
                                stake_amount = base_bal
                            else:
                                # available base balance (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏)
                                reserve_usdt = env_config.min_balance_usdt
                                # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º reserve –≤ –±–∞–∑–æ–≤—ã–π asset
                                reserve_base = reserve_usdt / price if price > 0 else 0
                                free_base = max(0.0, base_bal - reserve_base)
                                stake_amount = free_base * env_config.stake_percent
                                
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ —Å—Ç–µ–π–∫–∞—Ç—å —Å —É—á–µ—Ç–æ–º —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                            if current_staked_amount > 0:
                                log(f"STAKING: —É –≤–∞—Å —É–∂–µ –∑–∞—Å—Ç–µ–π–∫–∞–Ω–æ {current_staked_amount} {asset_switcher.base_asset}", "STAKING")
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ bot_status –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                                bot_status.setdefault("staking", {})
                                bot_status["staking"][asset_switcher.base_asset] = current_staked_amount
                                save_state()
                            elif stake_amount > 0:
                                stake_value_usdt = stake_amount * price
                                if stake_value_usdt >= env_config.min_stake_usdt:
                                    log(f"STAKING: –ø—ã—Ç–∞–µ–º—Å—è —Å—Ç–µ–π–∫–∞—Ç—å {stake_amount:.6f} {asset_switcher.base_asset} (~${stake_value_usdt:.2f})", "STAKING")
                                    res = staking_manager.stake(asset_switcher.base_asset, stake_amount)
                                    bot_status.setdefault("staking", {})
                                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
                                    if res.get("success"):
                                        # –í LIVE —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º stake_amount
                                        staked_amount = stake_amount
                                        bot_status["staking"][asset_switcher.base_asset] = bot_status["staking"].get(asset_switcher.base_asset, 0.0) + staked_amount
                                        log(f"STAKING: –¥–æ–±–∞–≤–ª–µ–Ω–æ {staked_amount} {asset_switcher.base_asset} –≤ —Å—Ç–µ–π–∫–∏–Ω–≥", "STAKING")
                                    save_state()
                        else:
                            # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–µ—Ä–∂–∞—Ç—å USDT –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ç–µ–π–∫–Ω—É—Ç—ã–µ –±–∞–∑–æ–≤—ã–µ ‚Äî –≤—ã–∫—É–ø–∞–µ–º
                            st_pos = staking_manager.get_position(asset_switcher.base_asset)
                            st_amount = 0
                            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–æ–ª–µ–π
                            try:
                                for field in ["totalAmount", "amount", "principalAmount"]:
                                    if field in st_pos and st_pos[field] is not None:
                                        raw_amount = st_pos[field]
                                        if isinstance(raw_amount, (int, float)):
                                            st_amount = float(raw_amount)
                                            break
                                        elif isinstance(raw_amount, str) and raw_amount.strip():
                                            st_amount = float(raw_amount)
                                            break
                            except (ValueError, TypeError):
                                log(f"STAKING: –æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π st_pos –≤ —á–∏—Å–ª–æ: {st_pos}", "ERROR")
                                st_amount = 0
                                
                            if st_amount > 0:
                                log(f"STAKING: –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –≤—ã–∫—É–ø {st_amount} {asset_switcher.base_asset}", "STAKING")
                                res = staking_manager.unstake(asset_switcher.base_asset, st_amount)
                                # —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ bot_status
                                bot_status.setdefault("staking", {})
                                if res.get("success") and res.get("simulated"):
                                    bot_status["staking"][asset_switcher.base_asset] = 0.0
                                    log(f"STAKING: —Å–∏–º—É–ª—è—Ü–∏—è –≤—ã–∫—É–ø–∞ {st_amount} {asset_switcher.base_asset}", "STAKING")
                                elif res.get("success"):
                                    log(f"STAKING: –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –≤—ã–∫—É–ø {st_amount} {asset_switcher.base_asset}", "STAKING")
                                save_state()
                except Exception as e:
                    log(f"–û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ —Å—Ç–µ–π–∫–∏–Ω–≥–∞: {e}", "ERROR")
                    
            # –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∞–∫—Ç–∏–≤—ã
            if not need_switch:
                log(f"‚úÖ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ï –¢–†–ï–ë–£–ï–¢–°–Ø - –∞–∫—Ç–∏–≤—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã", "OK")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            bot_status["status"] = "running"
            save_state()
            
            log(f"üò¥ –û–ñ–ò–î–ê–ù–ò–ï {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...", "SLEEP")
            time.sleep(CHECK_INTERVAL)
            
        except (BinanceAPIException, BinanceOrderException) as e:
            emsg = str(e)
            if "Too many requests" in emsg or "Request rate limit" in emsg:
                log(f"Rate limit: {e} ‚Äî —Å–ø–ª—é 5 —Å–µ–∫", "WARN")
                time.sleep(5)
            else:
                log(f"Binance –æ—à–∏–±–∫–∞: {e}", "ERROR")
                error_count += 1
                time.sleep(2)
        except Exception as e:
            log(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "ERROR")
            error_count += 1
            bot_status["status"] = f"error: {str(e)}"
            save_state()
            time.sleep(2)
    
    log("–¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "SHUTDOWN")

# ========== Flask –º–∞—Ä—à—Ä—É—Ç—ã ==========
@app.route("/")
def root():
    return jsonify({
        "ok": True, 
        "symbol": SYMBOL, 
        "status": bot_status.get("status", "idle"), 
        "current_asset": bot_status.get("current_asset", "USDT"),
        "should_hold": bot_status.get("should_hold", "USDT"),
        "mode": "LIVE",
        "uptime": bot_status.get("uptime", 0)
    })

@app.route("/health")
def health():
    try:
        if client:
            client.ping()
            return jsonify({"ok": True, "status": "healthy"})
        else:
            return jsonify({"ok": False, "status": "no_client"})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500

@app.route("/start")
def start():
    global running, bot_status
    if running:
        return jsonify({"ok": True, "message": "—É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"})
    
    if API_KEY and API_SECRET:
        init_client()
    else:
        return jsonify({"ok": False, "message": "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"})
    
    running = True
    bot_status["status"] = "running"
    save_state()
    
    t = threading.Thread(target=trading_loop, daemon=True)
    t.start()
    log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", "START")
    return jsonify({"ok": True, "mode": "LIVE"})

@app.route("/stop")
def stop():
    global running, bot_status
    running = False
    bot_status["status"] = "stopped"
    save_state()
    log("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "STOP")
    return jsonify({"ok": True})

@app.route("/status")
def status():
    return jsonify({
        "ok": True,
        "symbol": SYMBOL,
        "mode": "LIVE",
        "status": bot_status.get("status", "idle"),
        "current_asset": bot_status.get("current_asset", "USDT"),
        "should_hold": bot_status.get("should_hold", "USDT"),
        "current_price": bot_status.get("current_price", 0.0),
        "balance_usdt": bot_status.get("balance_usdt", 0.0),
        "balance_base": bot_status.get("balance_base", 0.0),
        "ma_short": bot_status.get("ma_short", 0.0),
        "ma_long": bot_status.get("ma_long", 0.0),
        "error_count": bot_status.get("error_count", 0),
        "uptime": bot_status.get("uptime", 0),
        "switches_count": bot_status.get("switches_count", 0),
        "last_switch": bot_status.get("last_switch"),
        "last_update": bot_status.get("last_update")
    })

@app.route("/config")
def config():
    return jsonify({
        "symbol": SYMBOL,
        "interval": INTERVAL,
        "ma_short": MA_SHORT,
        "ma_long": MA_LONG,
        "check_interval": CHECK_INTERVAL,
        "ma_spread_bps": MA_SPREAD_BPS,
        "min_balance_usdt": MIN_BALANCE_USDT
    })

@app.route("/config-status")
def config_status():
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_sources = {}
    critical_vars = ["BINANCE_API_KEY", "BINANCE_API_SECRET", "SYMBOL"]
    
    for var in critical_vars:
        system_value = os.environ.get(var)
        dotenv_value = os.getenv(var)
        
        if system_value is not None:
            source = "—Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
            value = system_value
        elif dotenv_value is not None:
            source = ".env —Ñ–∞–π–ª"
            value = dotenv_value
        else:
            source = "–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            value = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        # –ú–∞—Å–∫–∏—Ä—É–µ–º API –∫–ª—é—á–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if "API" in var and value != "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ":
            display_value = f"{value[:8]}...{value[-4:]}" if len(value) > 12 else "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else:
            display_value = value
            
        env_sources[var] = {
            "value": display_value,
            "source": source,
            "is_set": value != "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        }


        @app.route("/staking-status")
        def staking_status():
            try:
                asset = SYMBOL[:-4] if SYMBOL.endswith("USDT") else SYMBOL.split("USDT")[0]
                if staking_manager:
                    pos = staking_manager.get_position(asset)
                    return jsonify({"ok": True, "position": pos})
                else:
                    return jsonify({"ok": True, "position": bot_status.get("staking", {})})
            except Exception as e:
                return jsonify({"ok": False, "error": str(e)}), 500
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_issues = []
    if not env_config.config_status.api_keys_present:
        config_issues.append("API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    return jsonify({
        "ok": True,
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "trading_mode": {
            "current": "LIVE",
            "source": "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è",
            "warning": "–í–ù–ò–ú–ê–ù–ò–ï: –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞!"
        },
        "environment_variables": env_sources,
        "configuration_status": {
            "api_keys_present": env_config.config_status.api_keys_present,
            "safety_checks_passed": env_config.config_status.safety_checks_passed,
            "issues": config_issues
        },
        "file_status": {
            "env_file_path": os.path.join(os.path.dirname(os.path.abspath(__file__)), '.env'),
            "env_file_exists": os.path.exists(os.path.join(os.path.dirname(os.path.abspath(__file__)), '.env'))
        },
        "recommendations": [
            "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ - –º–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
            "–ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –±–∞–ª–∞–Ω—Å –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏",
            "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ",
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ API –∫–ª—é—á–µ–π –≤ Binance (—Ç–æ–ª—å–∫–æ —Å–ø–æ—Ç-—Ç–æ—Ä–≥–æ–≤–ª—è)"
        ]
    })

# ========== –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –¥–ª—è –¥–µ–ø–ª–æ—è ==========
if API_KEY and API_SECRET:
    try:
        if not running:
            init_client()
            running = True
            bot_thread = threading.Thread(target=trading_loop, daemon=True)
            bot_thread.start()
            log("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ä–µ–∂–∏–º–µ LIVE", "STARTUP")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}", "ERROR")
        running = False
else:
    log("‚ö†Ô∏è –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω: –Ω–µ—Ç API –∫–ª—é—á–µ–π", "WARNING")

# ========== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ==========
if __name__ == "__main__":
    if API_KEY and API_SECRET:
        init_client()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        if not running:
            running = True
            bot_thread = threading.Thread(target=trading_loop, daemon=True)
            bot_thread.start()
            mode = "TEST" if TEST_MODE else "LIVE"
            log(f"üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ {mode}", "STARTUP")
    
    port = int(os.getenv("PORT", "5000"))
    app.run(host="0.0.0.0", port=port)
    